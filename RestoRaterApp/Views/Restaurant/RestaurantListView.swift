//
//  RestaurantListView.swift
//  RestoRaterApp
//
//  Created by user249550 on 12/8/23.
//

import SwiftUI

struct RestaurantListView: View {
    @Environment(\.managedObjectContext) private var viewContext
    @EnvironmentObject private var userManager: UserManager
    @State private var showingAddRestaurantView = false
    @State private var listKey = UUID() // Used for refreshing the list
    @StateObject var viewModel: RestaurantViewModel = RestaurantViewModel()
    
    var body: some View {
        NavigationStack {
            List(viewModel.restaurants, id: \.self) { restaurant in
                RestaurantView(restaurant: restaurant)
                    .listRowSeparator(.hidden)
                //  Doing this to remove the right arrow generated by NavigationLink for some reason
                    .background(
                        NavigationLink("", destination:  RestaurantDetailView(restaurant: restaurant, onAddCompletion: {
                            refreshList()
                        }, onDeleteCompletion: {
                            fetch()
                        }))
                        .opacity(0))
            }.id(listKey)
                .listStyle(PlainListStyle())
                .navigationBarTitle("Restaurants", displayMode: .inline)
                .navigationBarItems(
                    trailing: Button(action: {
                        showingAddRestaurantView = true
                    }) {
                        if userManager.currentUser?.isAdmin ?? false {
                            Image(systemName: "plus")
                        }
                    }
                )
        }
        .onAppear {
            fetch()
        }
        .sheet(isPresented: $showingAddRestaurantView) {
            AddEditRestaurantView(scenario: .add, onAddCompletion: {
                fetch()
            })
        }
    }
    //    Used to force a refresh of the list view after editing an item
    private func refreshList() {
        listKey = UUID()
    }
    
    private func fetch() {
        viewModel.fetchRestaurants(context: viewContext)
    }
}
